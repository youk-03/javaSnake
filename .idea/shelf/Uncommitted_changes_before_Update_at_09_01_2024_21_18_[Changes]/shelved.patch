Index: src/main/java/lib/GameLoopTimer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package lib;\r\n\r\nimport javafx.animation.AnimationTimer;\r\n\r\npublic abstract class GameLoopTimer extends AnimationTimer {\r\n\r\n    private long lastFrameTimeNanos;\r\n    private long pauseStart;\r\n    boolean isPaused = false;\r\n    private boolean isActive = false;\r\n   private boolean pauseScheduled;\r\n    private boolean playScheduled;\r\n    private boolean restartScheduled;\r\n\r\n    public boolean isPaused() {\r\n        return isPaused;\r\n    }\r\n\r\n    public boolean isActive() {\r\n        return isActive;\r\n    }\r\n\r\n    public void pause() {\r\n        if (!isPaused) {\r\n            pauseScheduled = true;\r\n        }\r\n    }\r\n\r\n    public void play() {\r\n        if (isPaused) {\r\n            playScheduled = true;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void start() {\r\n        super.start();\r\n        isActive = true;\r\n        restartScheduled = true;\r\n    }\r\n\r\n    @Override\r\n    public void stop() {\r\n        super.stop();\r\n        pauseStart = 0;\r\n        isPaused = false;\r\n        isActive = false;\r\n        pauseScheduled = false;\r\n        playScheduled = false;\r\n    }\r\n\r\n    @Override\r\n    public void handle(long now){\r\n        System.out.println(\"now \"+ now);\r\n        if (pauseScheduled) {\r\n            pauseStart = now;\r\n            isPaused = true;\r\n            pauseScheduled = false;\r\n        }\r\n\r\n        if (playScheduled) {\r\n            isPaused = false;\r\n            playScheduled = false;\r\n        }\r\n\r\n        if (restartScheduled) {\r\n            isPaused = false;\r\n            restartScheduled = false;\r\n        }\r\n\r\n        if (!isPaused) {\r\n            float secondsSinceLastFrame = (float) ((now - lastFrameTimeNanos) / 1e9);\r\n            lastFrameTimeNanos = now;\r\n            tick(secondsSinceLastFrame);\r\n        }\r\n\r\n    }\r\n\r\n    public abstract void tick(float secondsSinceLastFrame);\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/lib/GameLoopTimer.java b/src/main/java/lib/GameLoopTimer.java
--- a/src/main/java/lib/GameLoopTimer.java	(revision c310fc5656cbbf37369bd67d66501a1ba0fb989f)
+++ b/src/main/java/lib/GameLoopTimer.java	(date 1704497896849)
@@ -8,9 +8,9 @@
     private long pauseStart;
     boolean isPaused = false;
     private boolean isActive = false;
-   private boolean pauseScheduled;
-    private boolean playScheduled;
-    private boolean restartScheduled;
+   private boolean pauseScheduled = false;
+    private boolean playScheduled = false;
+    private boolean restartScheduled= false;
 
     public boolean isPaused() {
         return isPaused;
@@ -51,7 +51,6 @@
 
     @Override
     public void handle(long now){
-        System.out.println("now "+ now);
         if (pauseScheduled) {
             pauseStart = now;
             isPaused = true;
@@ -69,6 +68,7 @@
         }
 
         if (!isPaused) {
+            //System.out.println("now "+ now);
             float secondsSinceLastFrame = (float) ((now - lastFrameTimeNanos) / 1e9);
             lastFrameTimeNanos = now;
             tick(secondsSinceLastFrame);
Index: src/main/java/implementation/GameController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package implementation;\r\n\r\nimport javafx.fxml.Initializable;\r\nimport lib.Fruit;\r\nimport lib.GameLoopTimer;\r\nimport lib.SlitherScene;\r\nimport lib.Snake;\r\n\r\nimport java.net.URL;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.ResourceBundle;\r\n\r\npublic class GameController implements Initializable {\r\n\r\n   public PaneScreen pane;\r\n   private List<Snake> snakeList;\r\n   private List<Fruit> fruitList;\r\n\r\n   MySlitherScene scene;\r\n\r\n\r\n    public GameController(PaneScreen pane, MySlitherScene scene){\r\n        this.pane = pane;\r\n        this.scene = scene;\r\n    }\r\n\r\n    @Override\r\n    public void initialize(URL url, ResourceBundle resourceBundle) {\r\n        //initialise le jeu et lance la while true\r\n        //ArrowSnake head = new ArrowSnake(new MyPosition(SlitherScene.windowWidth / 2, SlitherScene.windowHeight / 2));\r\n        MouseSnake head = new MouseSnake(new MyPosition(SlitherScene.windowWidth / 2, SlitherScene.windowHeight / 2));\r\n        //MyRandomSnake ia = new MyRandomSnake(new MyPosition(0, 0));\r\n\r\n        snakeList= new ArrayList<>();\r\n        snakeList.add(head);\r\n        //snakes.add(ia);\r\n        for(Snake s:snakeList){\r\n            s.display(pane);\r\n        }\r\n\r\n        MyFruit.init(pane,snakeList);\r\n        scene.init(snakeList,MyFruit.getListFruit());\r\n\r\n        GameLoopTimer timer = new GameLoopTimer() {\r\n            @Override\r\n            public void tick(float secondsSinceLastFrame) {\r\n                //while true\r\n                play();\r\n            }\r\n        };\r\n        timer.start();\r\n    }\r\n\r\n    public void play(){\r\n        for (Snake s:snakeList){\r\n            s.choseDirection(null);\r\n            s.move();\r\n            //if snake is touching a fruit add a segment to snake and display it\r\n\r\n            if(s.isTouchingSom(fruitList)){\r\n                s.add();\r\n                s.last().display(pane);\r\n                //add a new fruits to map\r\n                Fruit.displayAFruit(fruitList,snakeList);\r\n            }\r\n        }\r\n    }\r\n\r\n    //update player movement ?\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/implementation/GameController.java b/src/main/java/implementation/GameController.java
--- a/src/main/java/implementation/GameController.java	(revision c310fc5656cbbf37369bd67d66501a1ba0fb989f)
+++ b/src/main/java/implementation/GameController.java	(date 1704498242596)
@@ -28,8 +28,8 @@
     @Override
     public void initialize(URL url, ResourceBundle resourceBundle) {
         //initialise le jeu et lance la while true
-        //ArrowSnake head = new ArrowSnake(new MyPosition(SlitherScene.windowWidth / 2, SlitherScene.windowHeight / 2));
-        MouseSnake head = new MouseSnake(new MyPosition(SlitherScene.windowWidth / 2, SlitherScene.windowHeight / 2));
+        ArrowSnake head = new ArrowSnake(new MyPosition(SlitherScene.windowWidth / 2, SlitherScene.windowHeight / 2));
+        //MouseSnake head = new MouseSnake(new MyPosition(SlitherScene.windowWidth / 2, SlitherScene.windowHeight / 2));
         //MyRandomSnake ia = new MyRandomSnake(new MyPosition(0, 0));
 
         snakeList= new ArrayList<>();
@@ -46,13 +46,14 @@
             @Override
             public void tick(float secondsSinceLastFrame) {
                 //while true
-                play();
+                GameController.this.play();
             }
         };
         timer.start();
     }
 
     public void play(){
+        System.out.println("ouh");
         for (Snake s:snakeList){
             s.choseDirection(null);
             s.move();
Index: src/main/java/implementation/MySlitherScene.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package implementation;\r\n\r\nimport javafx.event.EventHandler;\r\nimport javafx.scene.input.KeyEvent;\r\nimport javafx.scene.input.MouseEvent;\r\nimport lib.*;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class MySlitherScene extends SlitherScene {\r\n    private Position<Double> mousePos;\r\n    private  PaneScreen pane;\r\n    private List<Snake> snakeList;\r\n    private List<Fruit> fruitList;\r\n\r\n    public MySlitherScene(PaneScreen pane) {\r\n        super(pane);\r\n        this.pane = pane;\r\n    }\r\n\r\n    public void play(){\r\n        for (Snake s:snakeList){\r\n            s.choseDirection(null);\r\n            s.move();\r\n            //if snake is touching a fruit add a segment to snake and display it\r\n\r\n            if(s.isTouchingSom(fruitList)){\r\n                s.add();\r\n                s.last().display(pane);\r\n                //add a new fruits to map\r\n                Fruit.displayAFruit(fruitList,snakeList);\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void init(List<Snake> snakeList, List<Fruit> fruitList) {\r\n        this.snakeList= snakeList;\r\n        this.fruitList= fruitList;\r\n        Snake playable= snakeList.get(0);\r\n        mousePos= new MyPosition(0,0);\r\n        if(!(playable instanceof ControllableSnake)){\r\n            throw new IllegalArgumentException();\r\n        }\r\n\r\n        if(playable instanceof ArrowSnake){\r\n            this.setOnKeyPressed(new EventHandler<KeyEvent>() {\r\n                @Override\r\n                public void handle(KeyEvent event) {\r\n\r\n                    switch (event.getCode()) {\r\n                        case UP: if(((ArrowSnake) playable).lastInput() == Direction.DOWN) {return;}\r\n                            ((ArrowSnake) playable).setLastInput(Direction.UP);\r\n                            break;\r\n                        case DOWN: if(((ArrowSnake) playable).lastInput() == Direction.UP) {return;}\r\n                            ((ArrowSnake) playable).setLastInput(Direction.DOWN);\r\n                            break;\r\n                        case LEFT: if(((ArrowSnake) playable).lastInput() == Direction.RIGHT) {return;}\r\n                            ((ArrowSnake) playable).setLastInput(Direction.LEFT);\r\n                            break;\r\n                        case RIGHT: if(((ArrowSnake) playable).lastInput() == Direction.LEFT){return;}\r\n                            ((ArrowSnake) playable).setLastInput(Direction.RIGHT);\r\n                            break;\r\n                    }\r\n                    play();\r\n                }\r\n            });\r\n        }\r\n\r\n        else if (playable instanceof MouseSnake){\r\n            this.setOnMouseMoved(new EventHandler<MouseEvent>() {\r\n                @Override public void handle(MouseEvent event) {\r\n                   ((MouseSnake) playable).setLastInput(new MyPosition(event.getX(), event.getY()));\r\n                   play();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    public Position<Double> getMousePos() {\r\n        return new MyPosition(mousePos.getX(),mousePos.getY());\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/implementation/MySlitherScene.java b/src/main/java/implementation/MySlitherScene.java
--- a/src/main/java/implementation/MySlitherScene.java	(revision c310fc5656cbbf37369bd67d66501a1ba0fb989f)
+++ b/src/main/java/implementation/MySlitherScene.java	(date 1704497978739)
@@ -63,7 +63,7 @@
                             ((ArrowSnake) playable).setLastInput(Direction.RIGHT);
                             break;
                     }
-                    play();
+                   // play();
                 }
             });
         }
@@ -72,7 +72,7 @@
             this.setOnMouseMoved(new EventHandler<MouseEvent>() {
                 @Override public void handle(MouseEvent event) {
                    ((MouseSnake) playable).setLastInput(new MyPosition(event.getX(), event.getY()));
-                   play();
+                   //play();
                 }
             });
         }
